# coding: utf-8

"""
    API для Навыка

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EstateObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'str',
        'object_cost': 'float',
        'tb_object_name': 'str',
        'object_region_code': 'str',
        'currency': 'str'
    }

    attribute_map = {
        'object_type': 'objectType',
        'object_cost': 'objectCost',
        'tb_object_name': 'tbObjectName',
        'object_region_code': 'objectRegionCode',
        'currency': 'currency'
    }

    def __init__(self, object_type=None, object_cost=None, tb_object_name=None, object_region_code=None, currency=None):  # noqa: E501
        """EstateObject - a model defined in Swagger"""  # noqa: E501
        self._object_type = None
        self._object_cost = None
        self._tb_object_name = None
        self._object_region_code = None
        self._currency = None
        self.discriminator = None
        if object_type is not None:
            self.object_type = object_type
        if object_cost is not None:
            self.object_cost = object_cost
        if tb_object_name is not None:
            self.tb_object_name = tb_object_name
        if object_region_code is not None:
            self.object_region_code = object_region_code
        if currency is not None:
            self.currency = currency

    @property
    def object_type(self):
        """Gets the object_type of this EstateObject.  # noqa: E501

        Тип объекта  # noqa: E501

        :return: The object_type of this EstateObject.  # noqa: E501
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this EstateObject.

        Тип объекта  # noqa: E501

        :param object_type: The object_type of this EstateObject.  # noqa: E501
        :type: str
        """

        self._object_type = object_type

    @property
    def object_cost(self):
        """Gets the object_cost of this EstateObject.  # noqa: E501

        Стоимость объекта недвижимости  # noqa: E501

        :return: The object_cost of this EstateObject.  # noqa: E501
        :rtype: float
        """
        return self._object_cost

    @object_cost.setter
    def object_cost(self, object_cost):
        """Sets the object_cost of this EstateObject.

        Стоимость объекта недвижимости  # noqa: E501

        :param object_cost: The object_cost of this EstateObject.  # noqa: E501
        :type: float
        """

        self._object_cost = object_cost

    @property
    def tb_object_name(self):
        """Gets the tb_object_name of this EstateObject.  # noqa: E501

        Территориальный Банк ОН  # noqa: E501

        :return: The tb_object_name of this EstateObject.  # noqa: E501
        :rtype: str
        """
        return self._tb_object_name

    @tb_object_name.setter
    def tb_object_name(self, tb_object_name):
        """Sets the tb_object_name of this EstateObject.

        Территориальный Банк ОН  # noqa: E501

        :param tb_object_name: The tb_object_name of this EstateObject.  # noqa: E501
        :type: str
        """

        self._tb_object_name = tb_object_name

    @property
    def object_region_code(self):
        """Gets the object_region_code of this EstateObject.  # noqa: E501

        Регион объекта недвижимости  # noqa: E501

        :return: The object_region_code of this EstateObject.  # noqa: E501
        :rtype: str
        """
        return self._object_region_code

    @object_region_code.setter
    def object_region_code(self, object_region_code):
        """Sets the object_region_code of this EstateObject.

        Регион объекта недвижимости  # noqa: E501

        :param object_region_code: The object_region_code of this EstateObject.  # noqa: E501
        :type: str
        """

        self._object_region_code = object_region_code

    @property
    def currency(self):
        """Gets the currency of this EstateObject.  # noqa: E501

        Валюта (const=643)  # noqa: E501

        :return: The currency of this EstateObject.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this EstateObject.

        Валюта (const=643)  # noqa: E501

        :param currency: The currency of this EstateObject.  # noqa: E501
        :type: str
        """

        self._currency = currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EstateObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EstateObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
