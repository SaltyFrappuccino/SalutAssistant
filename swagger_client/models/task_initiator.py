# coding: utf-8

"""
    API для Навыка

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskInitiator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'external_id': 'str',
        'source': 'str',
        'tb_name': 'str',
        'initiator_email': 'str',
        'initiator_id': 'str'
    }

    attribute_map = {
        'external_id': 'externalId',
        'source': 'source',
        'tb_name': 'tbName',
        'initiator_email': 'initiatorEmail',
        'initiator_id': 'initiatorID'
    }

    def __init__(self, external_id=None, source=None, tb_name=None, initiator_email=None, initiator_id=None):  # noqa: E501
        """TaskInitiator - a model defined in Swagger"""  # noqa: E501
        self._external_id = None
        self._source = None
        self._tb_name = None
        self._initiator_email = None
        self._initiator_id = None
        self.discriminator = None
        self.external_id = external_id
        self.source = source
        if tb_name is not None:
            self.tb_name = tb_name
        self.initiator_email = initiator_email
        self.initiator_id = initiator_id

    @property
    def external_id(self):
        """Gets the external_id of this TaskInitiator.  # noqa: E501

        Идентификатор заявки в источнике заявки (Номер КД)  # noqa: E501

        :return: The external_id of this TaskInitiator.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this TaskInitiator.

        Идентификатор заявки в источнике заявки (Номер КД)  # noqa: E501

        :param external_id: The external_id of this TaskInitiator.  # noqa: E501
        :type: str
        """
        if external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")  # noqa: E501

        self._external_id = external_id

    @property
    def source(self):
        """Gets the source of this TaskInitiator.  # noqa: E501

        Источник заявки(константа-SALUT)  # noqa: E501

        :return: The source of this TaskInitiator.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TaskInitiator.

        Источник заявки(константа-SALUT)  # noqa: E501

        :param source: The source of this TaskInitiator.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def tb_name(self):
        """Gets the tb_name of this TaskInitiator.  # noqa: E501

        Территориальный Банк  # noqa: E501

        :return: The tb_name of this TaskInitiator.  # noqa: E501
        :rtype: str
        """
        return self._tb_name

    @tb_name.setter
    def tb_name(self, tb_name):
        """Sets the tb_name of this TaskInitiator.

        Территориальный Банк  # noqa: E501

        :param tb_name: The tb_name of this TaskInitiator.  # noqa: E501
        :type: str
        """

        self._tb_name = tb_name

    @property
    def initiator_email(self):
        """Gets the initiator_email of this TaskInitiator.  # noqa: E501

        Email инициатора (корпоративный)  # noqa: E501

        :return: The initiator_email of this TaskInitiator.  # noqa: E501
        :rtype: str
        """
        return self._initiator_email

    @initiator_email.setter
    def initiator_email(self, initiator_email):
        """Sets the initiator_email of this TaskInitiator.

        Email инициатора (корпоративный)  # noqa: E501

        :param initiator_email: The initiator_email of this TaskInitiator.  # noqa: E501
        :type: str
        """
        if initiator_email is None:
            raise ValueError("Invalid value for `initiator_email`, must not be `None`")  # noqa: E501

        self._initiator_email = initiator_email

    @property
    def initiator_id(self):
        """Gets the initiator_id of this TaskInitiator.  # noqa: E501

        ID пользователя  # noqa: E501

        :return: The initiator_id of this TaskInitiator.  # noqa: E501
        :rtype: str
        """
        return self._initiator_id

    @initiator_id.setter
    def initiator_id(self, initiator_id):
        """Sets the initiator_id of this TaskInitiator.

        ID пользователя  # noqa: E501

        :param initiator_id: The initiator_id of this TaskInitiator.  # noqa: E501
        :type: str
        """
        if initiator_id is None:
            raise ValueError("Invalid value for `initiator_id`, must not be `None`")  # noqa: E501

        self._initiator_id = initiator_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskInitiator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskInitiator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
