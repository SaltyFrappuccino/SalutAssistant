# coding: utf-8

"""
    API для Навыка

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_date': 'datetime',
        'external_id': 'str',
        'type_full': 'str',
        'current_status': 'str'
    }

    attribute_map = {
        'create_date': 'createDate',
        'external_id': 'externalId',
        'type_full': 'typeFull',
        'current_status': 'currentStatus'
    }

    def __init__(self, create_date=None, external_id=None, type_full=None, current_status=None):  # noqa: E501
        """TaskInfo - a model defined in Swagger"""  # noqa: E501
        self._create_date = None
        self._external_id = None
        self._type_full = None
        self._current_status = None
        self.discriminator = None
        self.create_date = create_date
        self.external_id = external_id
        self.type_full = type_full
        self.current_status = current_status

    @property
    def create_date(self):
        """Gets the create_date of this TaskInfo.  # noqa: E501

        Дата создания заявки  # noqa: E501

        :return: The create_date of this TaskInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this TaskInfo.

        Дата создания заявки  # noqa: E501

        :param create_date: The create_date of this TaskInfo.  # noqa: E501
        :type: datetime
        """
        if create_date is None:
            raise ValueError("Invalid value for `create_date`, must not be `None`")  # noqa: E501

        self._create_date = create_date

    @property
    def external_id(self):
        """Gets the external_id of this TaskInfo.  # noqa: E501

        Идентификатор заявки в источнике заявки (Номер КД)  # noqa: E501

        :return: The external_id of this TaskInfo.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this TaskInfo.

        Идентификатор заявки в источнике заявки (Номер КД)  # noqa: E501

        :param external_id: The external_id of this TaskInfo.  # noqa: E501
        :type: str
        """
        if external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")  # noqa: E501

        self._external_id = external_id

    @property
    def type_full(self):
        """Gets the type_full of this TaskInfo.  # noqa: E501

        Тип заявки (расшифровка)  # noqa: E501

        :return: The type_full of this TaskInfo.  # noqa: E501
        :rtype: str
        """
        return self._type_full

    @type_full.setter
    def type_full(self, type_full):
        """Sets the type_full of this TaskInfo.

        Тип заявки (расшифровка)  # noqa: E501

        :param type_full: The type_full of this TaskInfo.  # noqa: E501
        :type: str
        """
        if type_full is None:
            raise ValueError("Invalid value for `type_full`, must not be `None`")  # noqa: E501

        self._type_full = type_full

    @property
    def current_status(self):
        """Gets the current_status of this TaskInfo.  # noqa: E501

        Текущий статус заявки  # noqa: E501

        :return: The current_status of this TaskInfo.  # noqa: E501
        :rtype: str
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status):
        """Sets the current_status of this TaskInfo.

        Текущий статус заявки  # noqa: E501

        :param current_status: The current_status of this TaskInfo.  # noqa: E501
        :type: str
        """
        if current_status is None:
            raise ValueError("Invalid value for `current_status`, must not be `None`")  # noqa: E501

        self._current_status = current_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
