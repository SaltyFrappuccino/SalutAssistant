# coding: utf-8

"""
    API для Навыка

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_initiator': 'TaskInitiator',
        'business_process': 'BusinessProcess',
        'task_info': 'TaskRequestTaskInfo',
        'client_manager_comment': 'ClientManagerComment',
        'documents_info': 'list[DocumentInfo]'
    }

    attribute_map = {
        'task_initiator': 'taskInitiator',
        'business_process': 'businessProcess',
        'task_info': 'taskInfo',
        'client_manager_comment': 'clientManagerComment',
        'documents_info': 'documentsInfo'
    }

    def __init__(self, task_initiator=None, business_process=None, task_info=None, client_manager_comment=None, documents_info=None):  # noqa: E501
        """TaskRequest - a model defined in Swagger"""  # noqa: E501
        self._task_initiator = None
        self._business_process = None
        self._task_info = None
        self._client_manager_comment = None
        self._documents_info = None
        self.discriminator = None
        self.task_initiator = task_initiator
        self.business_process = business_process
        if task_info is not None:
            self.task_info = task_info
        if client_manager_comment is not None:
            self.client_manager_comment = client_manager_comment
        if documents_info is not None:
            self.documents_info = documents_info

    @property
    def task_initiator(self):
        """Gets the task_initiator of this TaskRequest.  # noqa: E501


        :return: The task_initiator of this TaskRequest.  # noqa: E501
        :rtype: TaskInitiator
        """
        return self._task_initiator

    @task_initiator.setter
    def task_initiator(self, task_initiator):
        """Sets the task_initiator of this TaskRequest.


        :param task_initiator: The task_initiator of this TaskRequest.  # noqa: E501
        :type: TaskInitiator
        """
        if task_initiator is None:
            raise ValueError("Invalid value for `task_initiator`, must not be `None`")  # noqa: E501

        self._task_initiator = task_initiator

    @property
    def business_process(self):
        """Gets the business_process of this TaskRequest.  # noqa: E501


        :return: The business_process of this TaskRequest.  # noqa: E501
        :rtype: BusinessProcess
        """
        return self._business_process

    @business_process.setter
    def business_process(self, business_process):
        """Sets the business_process of this TaskRequest.


        :param business_process: The business_process of this TaskRequest.  # noqa: E501
        :type: BusinessProcess
        """
        if business_process is None:
            raise ValueError("Invalid value for `business_process`, must not be `None`")  # noqa: E501

        self._business_process = business_process

    @property
    def task_info(self):
        """Gets the task_info of this TaskRequest.  # noqa: E501


        :return: The task_info of this TaskRequest.  # noqa: E501
        :rtype: TaskRequestTaskInfo
        """
        return self._task_info

    @task_info.setter
    def task_info(self, task_info):
        """Sets the task_info of this TaskRequest.


        :param task_info: The task_info of this TaskRequest.  # noqa: E501
        :type: TaskRequestTaskInfo
        """

        self._task_info = task_info

    @property
    def client_manager_comment(self):
        """Gets the client_manager_comment of this TaskRequest.  # noqa: E501


        :return: The client_manager_comment of this TaskRequest.  # noqa: E501
        :rtype: ClientManagerComment
        """
        return self._client_manager_comment

    @client_manager_comment.setter
    def client_manager_comment(self, client_manager_comment):
        """Sets the client_manager_comment of this TaskRequest.


        :param client_manager_comment: The client_manager_comment of this TaskRequest.  # noqa: E501
        :type: ClientManagerComment
        """

        self._client_manager_comment = client_manager_comment

    @property
    def documents_info(self):
        """Gets the documents_info of this TaskRequest.  # noqa: E501

        Данные для выгрузки файла  # noqa: E501

        :return: The documents_info of this TaskRequest.  # noqa: E501
        :rtype: list[DocumentInfo]
        """
        return self._documents_info

    @documents_info.setter
    def documents_info(self, documents_info):
        """Sets the documents_info of this TaskRequest.

        Данные для выгрузки файла  # noqa: E501

        :param documents_info: The documents_info of this TaskRequest.  # noqa: E501
        :type: list[DocumentInfo]
        """

        self._documents_info = documents_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
