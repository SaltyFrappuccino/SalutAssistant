# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.business_process import BusinessProcess  # noqa: F401,E501
from swagger_server.models.client_manager_comment import ClientManagerComment  # noqa: F401,E501
from swagger_server.models.document_info import DocumentInfo  # noqa: F401,E501
from swagger_server.models.task_initiator import TaskInitiator  # noqa: F401,E501
from swagger_server.models.task_request_task_info import TaskRequestTaskInfo  # noqa: F401,E501
from swagger_server import util


class TaskRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, task_initiator: TaskInitiator=None, business_process: BusinessProcess=None, task_info: TaskRequestTaskInfo=None, client_manager_comment: ClientManagerComment=None, documents_info: List[DocumentInfo]=None):  # noqa: E501
        """TaskRequest - a model defined in Swagger

        :param task_initiator: The task_initiator of this TaskRequest.  # noqa: E501
        :type task_initiator: TaskInitiator
        :param business_process: The business_process of this TaskRequest.  # noqa: E501
        :type business_process: BusinessProcess
        :param task_info: The task_info of this TaskRequest.  # noqa: E501
        :type task_info: TaskRequestTaskInfo
        :param client_manager_comment: The client_manager_comment of this TaskRequest.  # noqa: E501
        :type client_manager_comment: ClientManagerComment
        :param documents_info: The documents_info of this TaskRequest.  # noqa: E501
        :type documents_info: List[DocumentInfo]
        """
        self.swagger_types = {
            'task_initiator': TaskInitiator,
            'business_process': BusinessProcess,
            'task_info': TaskRequestTaskInfo,
            'client_manager_comment': ClientManagerComment,
            'documents_info': List[DocumentInfo]
        }

        self.attribute_map = {
            'task_initiator': 'taskInitiator',
            'business_process': 'businessProcess',
            'task_info': 'taskInfo',
            'client_manager_comment': 'clientManagerComment',
            'documents_info': 'documentsInfo'
        }
        self._task_initiator = task_initiator
        self._business_process = business_process
        self._task_info = task_info
        self._client_manager_comment = client_manager_comment
        self._documents_info = documents_info

    @classmethod
    def from_dict(cls, dikt) -> 'TaskRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The taskRequest of this TaskRequest.  # noqa: E501
        :rtype: TaskRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_initiator(self) -> TaskInitiator:
        """Gets the task_initiator of this TaskRequest.


        :return: The task_initiator of this TaskRequest.
        :rtype: TaskInitiator
        """
        return self._task_initiator

    @task_initiator.setter
    def task_initiator(self, task_initiator: TaskInitiator):
        """Sets the task_initiator of this TaskRequest.


        :param task_initiator: The task_initiator of this TaskRequest.
        :type task_initiator: TaskInitiator
        """
        if task_initiator is None:
            raise ValueError("Invalid value for `task_initiator`, must not be `None`")  # noqa: E501

        self._task_initiator = task_initiator

    @property
    def business_process(self) -> BusinessProcess:
        """Gets the business_process of this TaskRequest.


        :return: The business_process of this TaskRequest.
        :rtype: BusinessProcess
        """
        return self._business_process

    @business_process.setter
    def business_process(self, business_process: BusinessProcess):
        """Sets the business_process of this TaskRequest.


        :param business_process: The business_process of this TaskRequest.
        :type business_process: BusinessProcess
        """
        if business_process is None:
            raise ValueError("Invalid value for `business_process`, must not be `None`")  # noqa: E501

        self._business_process = business_process

    @property
    def task_info(self) -> TaskRequestTaskInfo:
        """Gets the task_info of this TaskRequest.


        :return: The task_info of this TaskRequest.
        :rtype: TaskRequestTaskInfo
        """
        return self._task_info

    @task_info.setter
    def task_info(self, task_info: TaskRequestTaskInfo):
        """Sets the task_info of this TaskRequest.


        :param task_info: The task_info of this TaskRequest.
        :type task_info: TaskRequestTaskInfo
        """

        self._task_info = task_info

    @property
    def client_manager_comment(self) -> ClientManagerComment:
        """Gets the client_manager_comment of this TaskRequest.


        :return: The client_manager_comment of this TaskRequest.
        :rtype: ClientManagerComment
        """
        return self._client_manager_comment

    @client_manager_comment.setter
    def client_manager_comment(self, client_manager_comment: ClientManagerComment):
        """Sets the client_manager_comment of this TaskRequest.


        :param client_manager_comment: The client_manager_comment of this TaskRequest.
        :type client_manager_comment: ClientManagerComment
        """

        self._client_manager_comment = client_manager_comment

    @property
    def documents_info(self) -> List[DocumentInfo]:
        """Gets the documents_info of this TaskRequest.

        Данные для выгрузки файла  # noqa: E501

        :return: The documents_info of this TaskRequest.
        :rtype: List[DocumentInfo]
        """
        return self._documents_info

    @documents_info.setter
    def documents_info(self, documents_info: List[DocumentInfo]):
        """Sets the documents_info of this TaskRequest.

        Данные для выгрузки файла  # noqa: E501

        :param documents_info: The documents_info of this TaskRequest.
        :type documents_info: List[DocumentInfo]
        """

        self._documents_info = documents_info
