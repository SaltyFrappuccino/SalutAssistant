# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TaskInitiator(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, external_id: str=None, source: str=None, tb_name: str=None, initiator_email: str=None, initiator_id: str=None):  # noqa: E501
        """TaskInitiator - a model defined in Swagger

        :param external_id: The external_id of this TaskInitiator.  # noqa: E501
        :type external_id: str
        :param source: The source of this TaskInitiator.  # noqa: E501
        :type source: str
        :param tb_name: The tb_name of this TaskInitiator.  # noqa: E501
        :type tb_name: str
        :param initiator_email: The initiator_email of this TaskInitiator.  # noqa: E501
        :type initiator_email: str
        :param initiator_id: The initiator_id of this TaskInitiator.  # noqa: E501
        :type initiator_id: str
        """
        self.swagger_types = {
            'external_id': str,
            'source': str,
            'tb_name': str,
            'initiator_email': str,
            'initiator_id': str
        }

        self.attribute_map = {
            'external_id': 'externalId',
            'source': 'source',
            'tb_name': 'tbName',
            'initiator_email': 'initiatorEmail',
            'initiator_id': 'initiatorID'
        }
        self._external_id = external_id
        self._source = source
        self._tb_name = tb_name
        self._initiator_email = initiator_email
        self._initiator_id = initiator_id

    @classmethod
    def from_dict(cls, dikt) -> 'TaskInitiator':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The taskInitiator of this TaskInitiator.  # noqa: E501
        :rtype: TaskInitiator
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external_id(self) -> str:
        """Gets the external_id of this TaskInitiator.

        Идентификатор заявки в источнике заявки (Номер КД)  # noqa: E501

        :return: The external_id of this TaskInitiator.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id: str):
        """Sets the external_id of this TaskInitiator.

        Идентификатор заявки в источнике заявки (Номер КД)  # noqa: E501

        :param external_id: The external_id of this TaskInitiator.
        :type external_id: str
        """
        if external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")  # noqa: E501

        self._external_id = external_id

    @property
    def source(self) -> str:
        """Gets the source of this TaskInitiator.

        Источник заявки(константа-SALUT)  # noqa: E501

        :return: The source of this TaskInitiator.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: str):
        """Sets the source of this TaskInitiator.

        Источник заявки(константа-SALUT)  # noqa: E501

        :param source: The source of this TaskInitiator.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def tb_name(self) -> str:
        """Gets the tb_name of this TaskInitiator.

        Территориальный Банк  # noqa: E501

        :return: The tb_name of this TaskInitiator.
        :rtype: str
        """
        return self._tb_name

    @tb_name.setter
    def tb_name(self, tb_name: str):
        """Sets the tb_name of this TaskInitiator.

        Территориальный Банк  # noqa: E501

        :param tb_name: The tb_name of this TaskInitiator.
        :type tb_name: str
        """

        self._tb_name = tb_name

    @property
    def initiator_email(self) -> str:
        """Gets the initiator_email of this TaskInitiator.

        Email инициатора (корпоративный)  # noqa: E501

        :return: The initiator_email of this TaskInitiator.
        :rtype: str
        """
        return self._initiator_email

    @initiator_email.setter
    def initiator_email(self, initiator_email: str):
        """Sets the initiator_email of this TaskInitiator.

        Email инициатора (корпоративный)  # noqa: E501

        :param initiator_email: The initiator_email of this TaskInitiator.
        :type initiator_email: str
        """
        if initiator_email is None:
            raise ValueError("Invalid value for `initiator_email`, must not be `None`")  # noqa: E501

        self._initiator_email = initiator_email

    @property
    def initiator_id(self) -> str:
        """Gets the initiator_id of this TaskInitiator.

        ID пользователя  # noqa: E501

        :return: The initiator_id of this TaskInitiator.
        :rtype: str
        """
        return self._initiator_id

    @initiator_id.setter
    def initiator_id(self, initiator_id: str):
        """Sets the initiator_id of this TaskInitiator.

        ID пользователя  # noqa: E501

        :param initiator_id: The initiator_id of this TaskInitiator.
        :type initiator_id: str
        """
        if initiator_id is None:
            raise ValueError("Invalid value for `initiator_id`, must not be `None`")  # noqa: E501

        self._initiator_id = initiator_id
