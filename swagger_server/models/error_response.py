# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ErrorResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, status: str=None, error_description: str=None, error_details: str=None):  # noqa: E501
        """ErrorResponse - a model defined in Swagger

        :param status: The status of this ErrorResponse.  # noqa: E501
        :type status: str
        :param error_description: The error_description of this ErrorResponse.  # noqa: E501
        :type error_description: str
        :param error_details: The error_details of this ErrorResponse.  # noqa: E501
        :type error_details: str
        """
        self.swagger_types = {
            'status': str,
            'error_description': str,
            'error_details': str
        }

        self.attribute_map = {
            'status': 'status',
            'error_description': 'errorDescription',
            'error_details': 'errorDetails'
        }
        self._status = status
        self._error_description = error_description
        self._error_details = error_details

    @classmethod
    def from_dict(cls, dikt) -> 'ErrorResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The errorResponse of this ErrorResponse.  # noqa: E501
        :rtype: ErrorResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> str:
        """Gets the status of this ErrorResponse.


        :return: The status of this ErrorResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ErrorResponse.


        :param status: The status of this ErrorResponse.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def error_description(self) -> str:
        """Gets the error_description of this ErrorResponse.


        :return: The error_description of this ErrorResponse.
        :rtype: str
        """
        return self._error_description

    @error_description.setter
    def error_description(self, error_description: str):
        """Sets the error_description of this ErrorResponse.


        :param error_description: The error_description of this ErrorResponse.
        :type error_description: str
        """
        if error_description is None:
            raise ValueError("Invalid value for `error_description`, must not be `None`")  # noqa: E501

        self._error_description = error_description

    @property
    def error_details(self) -> str:
        """Gets the error_details of this ErrorResponse.


        :return: The error_details of this ErrorResponse.
        :rtype: str
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details: str):
        """Sets the error_details of this ErrorResponse.


        :param error_details: The error_details of this ErrorResponse.
        :type error_details: str
        """
        if error_details is None:
            raise ValueError("Invalid value for `error_details`, must not be `None`")  # noqa: E501

        self._error_details = error_details
